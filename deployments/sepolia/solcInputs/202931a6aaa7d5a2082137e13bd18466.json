{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"./PriceConvertor.sol\";\r\n\r\nerror NotEnough();\r\nerror CallFailed();\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConvertor for uint256;\r\n\r\n    uint256 private constant MINIMUM_USD = 50 * 1e18;\r\n    address public immutable i_owner;\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountUsd; \r\n    event FundIn(address funder, uint256 amountUsd);\r\n    event Withdraw(address _to, uint256 amount);\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address _priceFeed) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(_priceFeed);\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != i_owner) revert NotOwner();\r\n        _;\r\n    }\r\n\r\n    function fund() public payable {\r\n        if (msg.value.priceConvertionRate(priceFeed) <= MINIMUM_USD)\r\n            revert NotEnough();\r\n        funders.push(msg.sender);\r\n        addressToAmountUsd[msg.sender] = msg.value;\r\n        emit FundIn(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw() public {\r\n        for (uint256 i; i < funders.length; i++) {\r\n            address funder = funders[i];\r\n            addressToAmountUsd[funder] = 0;\r\n        }\r\n        funders = new address[](0);\r\n        (bool success, ) = payable(i_owner).call{value: address(this).balance}(\r\n            \"\"\r\n        );\r\n        if (!success) revert CallFailed();\r\n        emit Withdraw(msg.sender, address(this).balance);\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConvertor {\r\n    function getPrice(\r\n        AggregatorV3Interface _priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int price, , , ) = _priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function priceConvertionRate(\r\n        uint256 _ethAmount,\r\n        AggregatorV3Interface _priceFeed\r\n    ) internal view returns (uint256 ethAmountToUsd) {\r\n        uint256 ethPrice = getPrice(_priceFeed);\r\n        ethAmountToUsd = (ethPrice * _ethAmount) / 1e18;\r\n    }\r\n}\r\n "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}